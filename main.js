"use strict";
// JS Assessment: Find Your Hat //
import promptSync from "prompt-sync";
import clear from "clear-screen";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å user
const prompt = promptSync({ sigint: true });

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Symbols ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
const hat = "^";
const hole = "O";
const fieldCharacter = "‚ñë";
const pathCharacter = "*";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Class Field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡πå
class Field {
	//Method ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™ Field ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö parameter ‡∏ä‡∏∑‡πà‡∏≠ field
	constructor(field = [[]]) {
		this.field = field;

		//‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß 0, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0)
		this.positionRow = 0; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
		this.positionCol = 0; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô

		//check ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤ true = stop loop
		this.gameOver = false

		//‡∏ß‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå * ‡πÅ‡∏ó‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		this.field[this.positionRow][this.positionCol] = pathCharacter;
		
	}

    // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Print field //
    print() {
		clear(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
		this.field.forEach((row) => {
			console.log(row.join("")); // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
		});
	}

    //Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏•‡∏∞ move 
	askAndMove() {
		const move = prompt("Which way? (W = up, A = left, S = down, D = right): ").toUpperCase();
        //‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà .toUpperCase()
		// ‡πÉ‡∏ä‡πâ switch ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ input ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á row / col
        // W = ‡∏Ç‡∏∂‡πâ‡∏ô --> ‡∏•‡∏î‡πÅ‡∏ñ‡∏ß
        // S = ‡∏•‡∏á --> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß
        // A = ‡∏ã‡πâ‡∏≤‡∏¢ --> ‡∏•‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        // D = ‡∏Ç‡∏ß‡∏≤ --> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        // ‡∏ñ‡πâ‡∏≤ input ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‚Üí ‡πÅ‡∏à‡πâ‡∏á error
		switch (move) {
			case "W":
				this.positionRow -= 1;
				break;
			case "A":
				this.positionCol -=1;
				break;
			case "S":
				this.positionRow += 1;
				break;
			case "D":
				this.positionCol += 1;
				break;
			default:
				console.log("Invalid input. Input W, A, S, D only.");
				return;
		}

		this.checkPosition();
	}
	
	// method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏¢‡∏±‡∏ö
	checkPosition() {
		// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        //‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå < 0 = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏ã‡πâ‡∏≤‡∏¢/‡∏ö‡∏ô
        //‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏á/‡∏Ç‡∏ß‡∏≤
        //‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà ‚Üí ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		if (
			this.positionRow < 0 ||
			this.positionCol < 0 ||
			this.positionRow >= this.field.length ||
			this.positionCol >= this.field[0].length	
		)   {
			console.log("You moved outside the field. Game over! üí£");
		    this.gameOver = true;
		    return;
			}
		
			//‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ tile (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô) ‡∏°‡∏≤‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
			const tile = this.field[this.positionRow][this.positionCol];

			//‡∏ñ‡πâ‡∏≤ tile ‡πÄ‡∏õ‡πá‡∏ô ^ --> ‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏ß‡∏Å --> ‡∏ä‡∏ô‡∏∞
            //‡∏ñ‡πâ‡∏≤ tile ‡πÄ‡∏õ‡πá‡∏ô O --> ‡∏ï‡∏Å‡∏´‡∏•‡∏∏‡∏° --> ‡πÅ‡∏û‡πâ
            //‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‚ñë --> ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ --> ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ --> ‡∏ß‡∏≤‡∏á * ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
			if (tile === hat) {
				console.log("You found your hat! You win! üéâ");
				this.gameOver = true;
			} else if (tile === hole) {
				console.log("You fell into a hole! Game over! üòì");
				this.gameOver = true;
			} else {
				this.field[this.positionRow][this.positionCol] = pathCharacter;
			}
	}
	// Game Mode ON (method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°)
     startGame() {
		while (!this.gameOver) {
			this.print();
			this.askAndMove();
		}
	 }
    //‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏Å‡∏°‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ this.gameOver ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô true
    //‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà --> ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô --> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
}

const newGame = new Field([
	["‚ñë", "‚ñë", "O"],
	["‚ñë", "O", "‚ñë"],
	["‚ñë", "^", "‚ñë"],
]);

newGame.startGame(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏°