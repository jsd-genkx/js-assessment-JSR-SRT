"use strict";
// JS Assessment: Find Your Hat //
import promptSync from "prompt-sync";
import clear from "clear-screen";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á function prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å user
const prompt = promptSync({ sigint: true });

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Symbols ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
const hat = "^";
const hole = "O";
const fieldCharacter = "‚ñë";
const pathCharacter = "*";

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Class Field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡πå
class Field {
	//Method ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å class Field ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö parameter ‡∏ä‡∏∑‡πà‡∏≠ field
	constructor(field = [[]]) {
		this.field = field;

		//‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß 0, ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 0)
		this.positionRow = 0; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
		this.positionCol = 0; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô

		//check ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤ true = stop loop
		this.gameOver = false

		//‡∏ß‡∏≤‡∏á symbol * ‡πÅ‡∏ó‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		this.field[this.positionRow][this.positionCol] = pathCharacter;
		
	}

    // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Print field (‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠) //
    print() {
		clear(); 
        //‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á array ‡∏¢‡πà‡∏≠‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ map
		//‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß \n
		const displayField = this.field.map(row => row.join('')).join('\n');
		console.log(displayField);
	}
	// static method ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Field.generateField(...) ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á field ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á hole ‡∏Å‡∏±‡∏ö fieldCharacter ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏∏‡∏° (set ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0.2 / 20%)
    static generateField(height, width, holePercentage = 0.2) {
		
		//‡∏™‡∏£‡πâ‡∏≤‡∏á array 2 ‡∏°‡∏¥‡∏ï‡∏¥ ‡∏Ç‡∏ô‡∏≤‡∏î height x width ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        //‡πÉ‡∏ä‡πâ new Array(height) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏° height 
        //.fill(0) --> ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ 0 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ .map(...) ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        //.map(() --> new Array(width)) ‚Üí ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ array ‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö width
		const field = new Array(height).fill(0).map(() => new Array (width));

		//‡πÉ‡∏ä‡πâ loop for ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô field ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà "‚ñë" (‡∏û‡∏∑‡πâ‡∏ô) ‡∏´‡∏£‡∏∑‡∏≠ "O" (‡∏´‡∏•‡∏∏‡∏°)
        //‡πÉ‡∏ä‡πâ Math.random() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 0 ‡∏ñ‡∏∂‡∏á 1
        //‡∏ñ‡πâ‡∏≤ prob > holePercentage ‚Üí ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏û‡∏∑‡πâ‡∏ô (fieldCharacter)
        //‡∏ñ‡πâ‡∏≤ prob <= holePercentage ‚Üí ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏∏‡∏° (hole)
		for (let y = 0; y < height; y++) {
		  for (let x = 0; x < width; x++) {
			const prob = Math.random();
			field[y][x] = prob > holePercentage ? fieldCharacter : hole;
		  }
		}
        //‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏Å ^
        //‡πÉ‡∏ä‡πâ Math.random() * width ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Å‡∏ô x (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
        //‡πÉ‡∏ä‡πâ Math.random() * height ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Å‡∏ô y (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á)
        //‡πÉ‡∏ä‡πâ Math.floor(...) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ index ‡πÉ‡∏ô array ‡πÄ‡∏õ‡πá‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
	    const hatLocation = {
			x: Math.floor(Math.random() * width),
			y: Math.floor(Math.random() * height)
		};
		//‡πÉ‡∏ä‡πâ whle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà [0][0] (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
        //‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà [0][0] ‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
		while (hatLocation.x === 0 && hatLocation.y === 0){
			hatLocation.x = Math.floor(Math.random() * width);
			hatLocation.y = Math.floor(Math.random() * height);
		}
		//‡πÉ‡∏™‡πà‡∏´‡∏°‡∏ß‡∏Å (^) ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ
		field[hatLocation.y][hatLocation.x] = hat;
		return field; //‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ array 2 ‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á field ‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
	}


    //Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏•‡∏∞ move 
	askAndMove() {
		const move = prompt("Which way? (W = up, A = left, S = down, D = right): ").toUpperCase();
        //‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà .toUpperCase()
		// ‡πÉ‡∏ä‡πâ switch case ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ input ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á row / col
        // W = ‡∏Ç‡∏∂‡πâ‡∏ô --> ‡∏•‡∏î‡πÅ‡∏ñ‡∏ß
        // A = ‡∏ã‡πâ‡∏≤‡∏¢ --> ‡∏•‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
		// S = ‡∏•‡∏á --> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß
        // D = ‡∏Ç‡∏ß‡∏≤ --> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        // ‡∏ñ‡πâ‡∏≤ input ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 4 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‚Üí ‡πÅ‡∏à‡πâ‡∏á error
		switch (move) {
			case "W":
				this.positionRow -= 1;
				break;
			case "A":
				this.positionCol -=1;
				break;
			case "S":
				this.positionRow += 1;
				break;
			case "D":
				this.positionCol += 1;
				break;
			default:
				console.log("Invalid input. Input W, A, S, D only.");
				return;
		}

		this.checkPosition();
	}
	
	// method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏¢‡∏±‡∏ö
	checkPosition() {
		//‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        //‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå < 0 = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏ô
        //‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏•‡∏∏‡∏î‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤
        //‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà = ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		if (
			this.positionRow < 0 ||
			this.positionCol < 0 ||
			this.positionRow >= this.field.length ||
			this.positionCol >= this.field[0].length	
		)   {
			console.log("You moved outside the field. Game over! üí£");
		    this.gameOver = true;
		    return;
			}
		
			//‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ tile (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô) ‡∏°‡∏≤‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
			const tile = this.field[this.positionRow][this.positionCol];

			//‡∏ñ‡πâ‡∏≤ tile ‡πÄ‡∏õ‡πá‡∏ô ^ --> ‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏ß‡∏Å --> ‡∏ä‡∏ô‡∏∞
            //‡∏ñ‡πâ‡∏≤ tile ‡πÄ‡∏õ‡πá‡∏ô O --> ‡∏ï‡∏Å‡∏´‡∏•‡∏∏‡∏° --> ‡πÅ‡∏û‡πâ
            //‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‚ñë --> ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ --> ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ --> ‡∏ß‡∏≤‡∏á * ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
			if (tile === hat) {
				console.log("You found your hat! You win! üéâ");
				this.gameOver = true;
			} else if (tile === hole) {
				console.log("You fell into a hole! Game over! üòì");
				this.gameOver = true;
			} else {
				this.field[this.positionRow][this.positionCol] = pathCharacter;
			}
	}
	// Game Mode ON (method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°)
     startGame() {
		// ‡πÉ‡∏ä‡πâ ‡∏•‡∏π‡∏õ while ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ
        // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç !this.gameOver ‡∏Ñ‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ gameOver ‡πÄ‡∏õ‡πá‡∏ô false ‚Üí ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏Å‡∏° ‚Üí ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠
		while (!this.gameOver) {
			this.print();
			this.askAndMove();
		}
	 }
    //‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏Å‡∏°‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ this.gameOver ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏à‡∏ö
    //‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô --> ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô --> update ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á --> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---> ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Game Over
}

//‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏°‡∏™‡πå ‡πÅ‡∏ö‡∏ö static method ‡∏ä‡∏∑‡πà‡∏≠ generateField ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô row, column, ‡πÅ‡∏•‡∏∞ hole percentage ‡πÉ‡∏ô array
const myfield = new Field(Field.generateField(4, 4, 0.2));
myfield.startGame();

